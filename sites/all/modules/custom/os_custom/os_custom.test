<?php

// $Id$

/**
 * @file SimpleTests for @custom site.
 */

/**
 * Helper module for tests.
 */
class OsCustomHelperTestCase extends DrupalWebTestCase {

  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Don't create test db via install, instead copy existing db.
    global $db_prefix;

    // Store necessary current values before switching to prefixed database.
    $this->db_prefix_original = $db_prefix;
    $clean_url_original = variable_get('clean_url', 0);

    // Get schema of existing database.
    $schemas = drupal_get_schema();

    // Generate temporary prefixed database so tests don't interfere with live
    // database.
    $this->db_prefix_test = $db_prefix = 'simpletest' . mt_rand(1000, 1000000);

    // Copy each table into new database.
    foreach ($schemas as $name => $schema) {
      $this->cloneTable($name, $schema);
    }

    // Rebuild caches.
    menu_rebuild();
    actions_synchronize();
    _drupal_flush_css_js();
    $this->refreshVariables();

    // Use temporary files directory with the same prefix as database.
    $this->original_file_directory = file_directory_path();
    variable_set('file_directory_path', file_directory_path() . '/' . $db_prefix);
    file_check_directory(file_directory_path(), TRUE); // Create the files directory.
  }

  /**
   * Mirror over an existing tables structure, and copy the data.
   *
   * @param $name
   *   Table name.
   * @param $schema
   *   A Schema API definition array.
   * @return
   *   Array of table creation results.
   */
  function cloneTable($name, $schema) {
    $return = array();
    db_create_table($return, $name, $schema);

    if ($name == 'users') {
      // UID = 0 confuses mysql. Special handling here, taken from system.install
      db_query("INSERT INTO %s SELECT uid +1, name, pass, mail, mode, sort, threshold, theme, signature, created, access, login, status, timezone, language, picture, init, data FROM %s", $this->db_prefix_test . $name, $this->db_prefix_original . $name);
      // Update uid
      db_query("UPDATE %s SET uid = uid - 1", $this->db_prefix_test . $name);
    }
    else {
      // Copy over data (brackets are /not/ used or this wouldn't work).
      db_query("INSERT INTO %s SELECT * FROM %s", array($this->db_prefix_test . $name, $this->db_prefix_original . $name));
    }
  }

  /**
   * Create user with Web Admin role.
   */
  function drupalCreateWebAdmin() {
    $rid = $this->_getRoleId('web admin');
    if ($rid) {
      $user = $this->drupalCreateUser(array('access content'));
      $edit['roles'] = array($rid => $rid);
      $account = user_save($user, $edit);
      $account->pass_raw = $user->pass_raw;
      return $account;
    }
  }

  /**
   * Create user with Site Editor role.
   */
  function drupalCreateSiteEditor() {
    if ($rid) {
      $rid = $this->_getRoleId('site editor');
      $user = $this->drupalCreateUser(array('access content'));
      $edit['roles'] = array($rid => $rid);
      $account = user_save($user, $edit);
      $account->pass_raw = $user->pass_raw;
      return $account;
    }
  }

  /**
   * Create normal user.
   */
  function drupalCreateNormalUser() {
    $user = $this->drupalCreateUser(array('access content'));
    $edit['roles'] = array();
    $account = user_save($user, $edit);
    $account->pass_raw = $user->pass_raw;
    return $account;
  }

  /**
   * Find the role ID for a given role name.
   *
   * @param string $name
   *   The role name
   * @return integer
   *   The corresponding role ID.
   */
  private function _getRoleId($name) {
    $rid = db_result(db_query("SELECT rid FROM {role} WHERE name = '%s'", array($name)));
    if (!$rid) {
      $this->fail(t('No corresponding rid found for the %role role.', array('%role' => $name)));
      return FALSE;
    }
    return $rid;
  }
}

/**
 * Tests for user role and access.
 */
class OsCustomUserRoles extends OsCustomHelperTestCase {
  function getInfo() {
    return array(
      'name' => t('User roles and access.'),
      'description' => t('Proper roles and privileges.'),
      'group' => t('OpenSourcery'),
    );
  }

  function testUserRoles() {
    $expected = array(
      'site editor',
      'web admin',
      'anonymous user',
      'authenticated user',
    );
    $results = db_query("SELECT * FROM {role}");
    while ($role = db_fetch_object($results)) {
      $this->assertTrue(in_array($role->name, $expected), t('Found role %role', array('%role' => $role->name)));
      unset($expected[array_search($role->name, $expected)]);
    }
    foreach ($expected as $name) {
      $this->fail(t('Unaccounted for role: %name', array('%name' => $name)));
    }
  }
}

/**
 * Tests for confirming the site is structured properly.
 */
class OsCustomSiteMap extends OsCustomHelperTestCase {
  function getInfo() {
    return array(
      'name' => t('Site layout and navigation'),
      'description' => t('Tests for site map and navigation.'),
      'group' => t('OpenSourcery'),
    );
  }

  function testSiteLayout() {
    $web_admin = $this->drupalCreateWebAdmin();
    $this->fail(t('test'));
  }
}